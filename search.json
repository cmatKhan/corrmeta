[{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Basic correlated meta-analysis with corrmeta","text":"Meta-analysis common tool integrating findings across multiple OMIC scans, particularly investigators limited access summary results study. Traditional meta-analysis techniques often overlook problem hidden non-independencies among study elements, overlapping related subjects, leading potential biases inaccuracies aggregated results. corrmeta package presents solution conducting correlated meta-analysis, critical tool researchers dealing complexities data dependencies studies potentially related subjects (Province 2005), (Borecki Province 2008), (Province Borecki 2013). vignette cover basic usage corrmeta package.","code":""},{"path":[]},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"bioconductor-installation-recommended","dir":"Articles","previous_headings":"Installation","what":"Bioconductor installation (Recommended)","title":"Basic correlated meta-analysis with corrmeta","text":"Try first installation methods.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"corrmeta\")"},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"install-from-github","dir":"Articles","previous_headings":"Installation","what":"Install from Github","title":"Basic correlated meta-analysis with corrmeta","text":"","code":"BiocManager::install(\"wsjung/corrmeta\")"},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"load-the-package","dir":"Articles","previous_headings":"Installation","what":"Load the package","title":"Basic correlated meta-analysis with corrmeta","text":"Check error loading package.","code":"library(corrmeta)"},{"path":[]},{"path":[]},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"load-data","dir":"Articles","previous_headings":"Simple example > Preprocessing","what":"Load data","title":"Basic correlated meta-analysis with corrmeta","text":"loads trt1, trt2, trt3 short, simulated SNP-trait association datasets. Note although examples working SNP datasets, corrmeta works common OMIC unit inference across input dataset. corrmeta requires input single dataframe OMIC units inference column markname scan column.","code":"data(snp_example, package=\"corrmeta\") varlist <- c(\"trt1\",\"trt2\",\"trt3\")"},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"correlated-meta-analysis","dir":"Articles","previous_headings":"Simple example","what":"Correlated meta-analysis","title":"Basic correlated meta-analysis with corrmeta","text":"preprocessing step, can now run function tetracorr takes input dataframe data varlist list scans column names data. Briefly, tetracorr computes z-scores input p-values using complement probit transformation calculates polychoric correlations. tetracorr returns object two elements. sigma table tetrachoric correlation coefficients pair input scans. sum_sigma sum pair-wise tetrachoric corerlation coefficients.","code":"tc <- tetracorr(snp_example, varlist) tc ## $sigma ## # A tibble: 3 × 4 ##   row     trt1  trt2   trt3 ##   <chr>  <dbl> <dbl>  <dbl> ## 1 trt1   1     0.215 -0.215 ## 2 trt2   0.215 1      0.127 ## 3 trt3  -0.215 0.127  1     ##  ## $sum_sigma ## [1] 3.253552"},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"fishers-method","dir":"Articles","previous_headings":"Simple example","what":"Fisher’s method","title":"Basic correlated meta-analysis with corrmeta","text":"final correlated meta-analysis p-value can computed using Fisher’s method. fishp takes input dataframe, list scans, outputs tetracorr.","code":"fishp(snp_example, varlist, tc$sigma, tc$sum_sigma) ##          markname    trt1   trt2    trt3 num_obs sum_sigma_var sum_chisq ## 1  c01b000015585s 0.35580 0.7356 0.69200       3      3.253552  3.417249 ## 2  c01b000015644s 0.58850 0.4539 0.71640       3      3.253552  3.307147 ## 3  c01b000015647s 0.18840 0.3029 0.21110       3      3.253552  8.837928 ## 4  c01b000015717s 0.99820 0.2474 0.20290       3      3.253552  5.987185 ## 5  c01b000015721s 0.74750 0.2206 0.19540       3      3.253552  6.870263 ## 6  c01b000016805s 0.08051 0.1532 0.79100       3      3.253552  9.259684 ## 7  c01b000016809s 0.07062 0.2896 0.85790       3      3.253552  8.085928 ## 8  c01b000016856s 0.74300 0.5204 0.31930       3      3.253552  4.183682 ## 9  c01b000016946s 0.77860 0.6758 0.80840       3      3.253552  1.709628 ## 10 c01b000016963s 0.82460 0.7960 0.30990       3      3.253552  3.185037 ## 11 c01b000016968s 0.13200 0.5866 0.25170       3      3.253552  7.875766 ## 12 c01b000016977s 0.82080 0.7761 0.21520       3      3.253552  3.974274 ## 13 c01b000016993s 0.18290 0.6209 0.06663       3      3.253552  9.768003 ## 14 c01b000017041s 0.76820 0.8736 0.54980       3      3.253552  1.994077 ## 15 c01b000017101s 0.24760 0.3189 0.10090       3      3.253552  9.664888 ## 16 c01b000017147s 0.03534 0.9412 0.99310       3      3.253552  6.820527 ## 17 c01b000017181s 0.84080 0.7264 0.76440       3      3.253552  1.523440 ## 18 c01b000017375s 0.97000 0.2214 0.03283       3      3.253552  9.909312 ## 19 c01b000017379s 0.56130 0.5311 0.05570       3      3.253552  8.196160 ##         sum_z    pvalue     meta_z     meta_p meta_nlog10p ## 1  -0.7616582 0.7549448 -0.4222612 0.66358283   0.17810486 ## 2  -0.6800542 0.7694257 -0.3770202 0.64692071   0.18914894 ## 3   2.2024960 0.1829002  1.2210578 0.11103206   0.95455159 ## 4  -1.3972360 0.4246272 -0.7746239 0.78071902   0.10750524 ## 5   0.9616926 0.3330121  0.5331598 0.29696150   0.52729986 ## 6   1.6145585 0.1594917  0.8951069 0.18536498   0.73197231 ## 7   0.9548107 0.2318753  0.5293445 0.29828326   0.52537112 ## 8  -0.2341224 0.6518348 -0.1297968 0.55163641   0.25834708 ## 9  -2.0954750 0.9443755 -1.1617257 0.87732654   0.05683873 ## 10 -1.2643232 0.7852901 -0.7009374 0.75832894   0.12014237 ## 11  1.5673289 0.2473471  0.8689229 0.19244465   0.71569416 ## 12 -0.8889986 0.6801580 -0.4928584 0.68894370   0.16181627 ## 13  2.0978928 0.1347681  1.1630661 0.12240135   0.91221381 ## 14 -2.0016627 0.9202425 -1.1097164 0.86643938   0.06226182 ## 15  2.4292787 0.1394923  1.3467855 0.08902466   1.05048968 ## 16 -2.2198268 0.3377643 -1.2306660 0.89077610   0.05023145 ## 17 -2.3202403 0.9579223 -1.2863350 0.90083691   0.04535383 ## 18  0.7274177 0.1285234  0.4032784 0.34337171   0.46423549 ## 19  1.3596307 0.2240816  0.7537756 0.22549200   0.64686886"},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"example-with-missing-samples","dir":"Articles","previous_headings":"","what":"Example with missing samples","title":"Basic correlated meta-analysis with corrmeta","text":"example shows corrmeta’s capability dealing missing samples across scans. possible leveraging basic property MVN distribution every subdimensional space also MVN distributed (learn (Province Borecki 2013)). example datasets , samples removed.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"preprocessing-1","dir":"Articles","previous_headings":"Example with missing samples","what":"Preprocessing","title":"Basic correlated meta-analysis with corrmeta","text":"can see trt2_missing missing c01b000015585s trt3_missing missing c01b000015585s c01b000015644s.","code":"data(snp_example_missing, package=\"corrmeta\") varlist <- c(\"trt1\",\"trt2\",\"trt3\") ##          markname    trt1   trt2    trt3 ## 1  c01b000015585s 0.35580     NA      NA ## 2  c01b000015644s 0.58850 0.4539      NA ## 3  c01b000015647s 0.18840 0.3029 0.21110 ## 4  c01b000015717s 0.99820 0.2474 0.20290 ## 5  c01b000015721s 0.74750 0.2206 0.19540 ## 6  c01b000016805s 0.08051 0.1532 0.79100 ## 7  c01b000016809s 0.07062 0.2896 0.85790 ## 8  c01b000016856s 0.74300 0.5204 0.31930 ## 9  c01b000016946s 0.77860 0.6758 0.80840 ## 10 c01b000016963s 0.82460 0.7960 0.30990 ## 11 c01b000016968s 0.13200 0.5866 0.25170 ## 12 c01b000016977s 0.82080 0.7761 0.21520 ## 13 c01b000016993s 0.18290 0.6209 0.06663 ## 14 c01b000017041s 0.76820 0.8736 0.54980 ## 15 c01b000017101s 0.24760 0.3189 0.10090 ## 16 c01b000017147s 0.03534 0.9412 0.99310 ## 17 c01b000017181s 0.84080 0.7264 0.76440 ## 18 c01b000017375s 0.97000 0.2214 0.03283 ## 19 c01b000017379s 0.56130 0.5311 0.05570"},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"correlated-meta-analysis-1","dir":"Articles","previous_headings":"Example with missing samples","what":"Correlated meta-analysis","title":"Basic correlated meta-analysis with corrmeta","text":"","code":"tc <- tetracorr(snp_example_missing, varlist) tc ## $sigma ## # A tibble: 3 × 4 ##   row     trt1  trt2   trt3 ##   <chr>  <dbl> <dbl>  <dbl> ## 1 trt1   1     0.319 -0.212 ## 2 trt2   0.319 1      0.192 ## 3 trt3  -0.212 0.192  1     ##  ## $sum_sigma ## [1] 3.597483"},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"fishers-method-1","dir":"Articles","previous_headings":"Example with missing samples","what":"Fisher’s method","title":"Basic correlated meta-analysis with corrmeta","text":"","code":"fishp(snp_example_missing, varlist, tc$sigma, tc$sum_sigma) ##          markname    trt1   trt2    trt3 num_obs sum_sigma_var sum_chisq ## 1  c01b000015585s 0.35580     NA      NA       1      1.000000  2.066773 ## 2  c01b000015644s 0.58850 0.4539      NA       2      2.637578  2.640113 ## 3  c01b000015647s 0.18840 0.3029 0.21110       3      3.597483  8.837928 ## 4  c01b000015717s 0.99820 0.2474 0.20290       3      3.597483  5.987185 ## 5  c01b000015721s 0.74750 0.2206 0.19540       3      3.597483  6.870263 ## 6  c01b000016805s 0.08051 0.1532 0.79100       3      3.597483  9.259684 ## 7  c01b000016809s 0.07062 0.2896 0.85790       3      3.597483  8.085928 ## 8  c01b000016856s 0.74300 0.5204 0.31930       3      3.597483  4.183682 ## 9  c01b000016946s 0.77860 0.6758 0.80840       3      3.597483  1.709628 ## 10 c01b000016963s 0.82460 0.7960 0.30990       3      3.597483  3.185037 ## 11 c01b000016968s 0.13200 0.5866 0.25170       3      3.597483  7.875766 ## 12 c01b000016977s 0.82080 0.7761 0.21520       3      3.597483  3.974274 ## 13 c01b000016993s 0.18290 0.6209 0.06663       3      3.597483  9.768003 ## 14 c01b000017041s 0.76820 0.8736 0.54980       3      3.597483  1.994077 ## 15 c01b000017101s 0.24760 0.3189 0.10090       3      3.597483  9.664888 ## 16 c01b000017147s 0.03534 0.9412 0.99310       3      3.597483  6.820527 ## 17 c01b000017181s 0.84080 0.7264 0.76440       3      3.597483  1.523440 ## 18 c01b000017375s 0.97000 0.2214 0.03283       3      3.597483  9.909312 ## 19 c01b000017379s 0.56130 0.5311 0.05570       3      3.597483  8.196160 ##         sum_z    pvalue      meta_z    meta_p meta_nlog10p ## 1   0.3697081 0.9134561  0.36970809 0.3558000   0.44879406 ## 2  -0.1078742 0.8524690 -0.06642244 0.5264792   0.27861874 ## 3   2.2024960 0.1829002  1.16122324 0.1227756   0.91088807 ## 4  -1.3972360 0.4246272 -0.73666555 0.7693371   0.11388331 ## 5   0.9616926 0.3330121  0.50703373 0.3060656   0.51418552 ## 6   1.6145585 0.1594917  0.85124462 0.1973167   0.70483607 ## 7   0.9548107 0.2318753  0.50340539 0.3073396   0.51238142 ## 8  -0.2341224 0.6518348 -0.12343648 0.5491193   0.26033332 ## 9  -2.0954750 0.9443755 -1.10479851 0.8653765   0.06279488 ## 10 -1.2643232 0.7852901 -0.66658985 0.7474829   0.12639873 ## 11  1.5673289 0.2473471  0.82634374 0.2043046   0.68972193 ## 12 -0.8889986 0.6801580 -0.46870728 0.6803606   0.16726087 ## 13  2.0978928 0.1347681  1.10607323 0.1343474   0.87177070 ## 14 -2.0016627 0.9202425 -1.05533782 0.8543646   0.06835677 ## 15  2.4292787 0.1394923  1.28079001 0.1001337   0.99941966 ## 16 -2.2198268 0.3377643 -1.17036060 0.8790721   0.05597552 ## 17 -2.3202403 0.9579223 -1.22330167 0.8893921   0.05090673 ## 18  0.7274177 0.1285234  0.38351686 0.3506683   0.45510351 ## 19  1.3596307 0.2240816  0.71683887 0.2367368   0.62573429"},{"path":"https://cmatkhan.github.io/corrmeta/articles/vignette.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Basic correlated meta-analysis with corrmeta","text":"","code":"## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] corrmeta_0.99.0  dplyr_1.1.4      magrittr_2.0.3   BiocStyle_2.30.0 ##  ## loaded via a namespace (and not attached): ##  [1] jsonlite_1.8.8      compiler_4.3.2      BiocManager_1.30.22 ##  [4] tidyselect_1.2.0    stringr_1.5.1       parallel_4.3.2      ##  [7] tidyr_1.3.1         jquerylib_0.1.4     systemfonts_1.0.5   ## [10] textshaping_0.3.7   yaml_2.3.8          fastmap_1.1.1       ## [13] R6_2.5.1            generics_0.1.3      knitr_1.45          ## [16] admisc_0.34         tibble_3.2.1        bookdown_0.37       ## [19] desc_1.4.3          bslib_0.6.1         pillar_1.9.0        ## [22] rlang_1.1.3         utf8_1.2.4          cachem_1.0.8        ## [25] stringi_1.8.3       xfun_0.42           fs_1.6.3            ## [28] sass_0.4.8          memoise_2.0.1       cli_3.6.2           ## [31] withr_3.0.0         pkgdown_2.0.7       digest_0.6.34       ## [34] mvtnorm_1.2-4       lifecycle_1.0.4     vctrs_0.6.5         ## [37] evaluate_0.23       glue_1.7.0          ragg_1.2.7          ## [40] fansi_1.0.6         polycor_0.8-1       rmarkdown_2.25      ## [43] purrr_1.0.2         tools_4.3.2         pkgconfig_2.0.3     ## [46] htmltools_0.5.7"},{"path":[]},{"path":"https://cmatkhan.github.io/corrmeta/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Woo Seok Jung. Author, maintainer. Michael Province. Author.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jung W, Province M (2024). corrmeta: Correlated Meta-Analysis (corrmeta). R package version 0.99.0, https://cmatkhan.github.io/corrmeta/.","code":"@Manual{,   title = {corrmeta: Correlated Meta-Analysis (corrmeta)},   author = {Woo Seok Jung and Michael Province},   year = {2024},   note = {R package version 0.99.0},   url = {https://cmatkhan.github.io/corrmeta/}, }"},{"path":"https://cmatkhan.github.io/corrmeta/index.html","id":"corrmeta","dir":"","previous_headings":"","what":"Correlated Meta-Analysis (corrmeta)","title":"Correlated Meta-Analysis (corrmeta)","text":"Correlated Meta-Analysis (corrmeta) integrates findings across multiple OMIC scans considering correlated information OMIC scans.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Correlated Meta-Analysis (corrmeta)","text":"can install development version corrmeta GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"wsjung/corrmeta\")"},{"path":"https://cmatkhan.github.io/corrmeta/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Correlated Meta-Analysis (corrmeta)","text":"Coming Soon","code":""},{"path":"https://cmatkhan.github.io/corrmeta/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Correlated Meta-Analysis (corrmeta)","text":"Province MA. Meta-analyses correlated genomic scans. Genet Epidemiol. 2005;29:274,#137. Borecki IB, Province MA. Genetic genomic discovery using family studies. Circulation. 2008 Sep 2;118(10):1057-63. doi: 10.1161/CIRCULATIONAHA.107.714592. PMID: 18765388. Province MA, Borecki IB. correlated meta-analysis strategy data mining “OMIC” scans. Pac Symp Biocomput. 2013:236-46. PMID: 23424128; PMCID: PMC3773990.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/fishp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Fisher's method p-value and meta-analysis statistics — fishp","title":"Calculate Fisher's method p-value and meta-analysis statistics — fishp","text":"Calculate Fisher's method p-value meta-analysis statistics","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/fishp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Fisher's method p-value and meta-analysis statistics — fishp","text":"","code":"fishp(df, vars, df_sigma, sum_sigma)"},{"path":"https://cmatkhan.github.io/corrmeta/reference/fishp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Fisher's method p-value and meta-analysis statistics — fishp","text":"df data frame \"markname\" study names column names. vars character vector study names include meta-analysis. df_sigma data frame tetrachoric correlations. sum_sigma sum tetrachoric correlations.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/fishp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Fisher's method p-value and meta-analysis statistics — fishp","text":"data frame columns 'markname', 'sum_chisq', 'sum_z', 'sum_sigma_var', 'pvalue', 'meta_z', 'meta_p', 'meta_nlog10p'","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/fishp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Fisher's method p-value and meta-analysis statistics — fishp","text":"","code":"data(snp_example)   head(snp_example) #>         markname    trt1   trt2   trt3 #> 1 c01b000015585s 0.35580 0.7356 0.6920 #> 2 c01b000015644s 0.58850 0.4539 0.7164 #> 3 c01b000015647s 0.18840 0.3029 0.2111 #> 4 c01b000015717s 0.99820 0.2474 0.2029 #> 5 c01b000015721s 0.74750 0.2206 0.1954 #> 6 c01b000016805s 0.08051 0.1532 0.7910   varlist <- c(\"trt1\",\"trt2\",\"trt3\")   tc <- tetracorr(snp_example, varlist)   fishp(snp_example, varlist, tc$sigma, tc$sum_sigma) #>          markname    trt1   trt2    trt3 num_obs sum_sigma_var sum_chisq #> 1  c01b000015585s 0.35580 0.7356 0.69200       3      3.253552  3.417249 #> 2  c01b000015644s 0.58850 0.4539 0.71640       3      3.253552  3.307147 #> 3  c01b000015647s 0.18840 0.3029 0.21110       3      3.253552  8.837928 #> 4  c01b000015717s 0.99820 0.2474 0.20290       3      3.253552  5.987185 #> 5  c01b000015721s 0.74750 0.2206 0.19540       3      3.253552  6.870263 #> 6  c01b000016805s 0.08051 0.1532 0.79100       3      3.253552  9.259684 #> 7  c01b000016809s 0.07062 0.2896 0.85790       3      3.253552  8.085928 #> 8  c01b000016856s 0.74300 0.5204 0.31930       3      3.253552  4.183682 #> 9  c01b000016946s 0.77860 0.6758 0.80840       3      3.253552  1.709628 #> 10 c01b000016963s 0.82460 0.7960 0.30990       3      3.253552  3.185037 #> 11 c01b000016968s 0.13200 0.5866 0.25170       3      3.253552  7.875766 #> 12 c01b000016977s 0.82080 0.7761 0.21520       3      3.253552  3.974274 #> 13 c01b000016993s 0.18290 0.6209 0.06663       3      3.253552  9.768003 #> 14 c01b000017041s 0.76820 0.8736 0.54980       3      3.253552  1.994077 #> 15 c01b000017101s 0.24760 0.3189 0.10090       3      3.253552  9.664888 #> 16 c01b000017147s 0.03534 0.9412 0.99310       3      3.253552  6.820527 #> 17 c01b000017181s 0.84080 0.7264 0.76440       3      3.253552  1.523440 #> 18 c01b000017375s 0.97000 0.2214 0.03283       3      3.253552  9.909312 #> 19 c01b000017379s 0.56130 0.5311 0.05570       3      3.253552  8.196160 #>         sum_z    pvalue     meta_z     meta_p meta_nlog10p #> 1  -0.7616582 0.7549448 -0.4222612 0.66358283   0.17810486 #> 2  -0.6800542 0.7694257 -0.3770202 0.64692071   0.18914894 #> 3   2.2024960 0.1829002  1.2210578 0.11103206   0.95455159 #> 4  -1.3972360 0.4246272 -0.7746239 0.78071902   0.10750524 #> 5   0.9616926 0.3330121  0.5331598 0.29696150   0.52729986 #> 6   1.6145585 0.1594917  0.8951069 0.18536498   0.73197231 #> 7   0.9548107 0.2318753  0.5293445 0.29828326   0.52537112 #> 8  -0.2341224 0.6518348 -0.1297968 0.55163641   0.25834708 #> 9  -2.0954750 0.9443755 -1.1617257 0.87732654   0.05683873 #> 10 -1.2643232 0.7852901 -0.7009374 0.75832894   0.12014237 #> 11  1.5673289 0.2473471  0.8689229 0.19244465   0.71569416 #> 12 -0.8889986 0.6801580 -0.4928584 0.68894370   0.16181627 #> 13  2.0978928 0.1347681  1.1630661 0.12240135   0.91221381 #> 14 -2.0016627 0.9202425 -1.1097164 0.86643938   0.06226182 #> 15  2.4292787 0.1394923  1.3467855 0.08902466   1.05048968 #> 16 -2.2198268 0.3377643 -1.2306660 0.89077610   0.05023145 #> 17 -2.3202403 0.9579223 -1.2863350 0.90083691   0.04535383 #> 18  0.7274177 0.1285234  0.4032784 0.34337171   0.46423549 #> 19  1.3596307 0.2240816  0.7537756 0.22549200   0.64686886"},{"path":"https://cmatkhan.github.io/corrmeta/reference/generate_random_p_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a list of random p-values with mixed significant and nonsignificant values — generate_random_p_values","title":"Generates a list of random p-values with mixed significant and nonsignificant values — generate_random_p_values","text":"Generates list random p-values mixed significant nonsignificant values","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/generate_random_p_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a list of random p-values with mixed significant and nonsignificant values — generate_random_p_values","text":"","code":"generate_random_p_values(n, ratio_significant)"},{"path":"https://cmatkhan.github.io/corrmeta/reference/generate_random_p_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a list of random p-values with mixed significant and nonsignificant values — generate_random_p_values","text":"n number samples ratio_significant fraction p-values significant","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/polycorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Polychoric Correlations — polycorr","title":"Calculate Polychoric Correlations — polycorr","text":"function calculates polychoric correlations pairs variables given data frame. returns data frame row column names variables, polychoric correlation coefficient, standard error.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/polycorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Polychoric Correlations — polycorr","text":"","code":"polycorr(data, varlist)"},{"path":"https://cmatkhan.github.io/corrmeta/reference/polycorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Polychoric Correlations — polycorr","text":"data data frame \"markname\" study names column names. varlist character vector study names include meta-analysis.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/polycorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Polychoric Correlations — polycorr","text":"data frame polychoric correlation coefficients standard errors","code":""},{"path":[]},{"path":"https://cmatkhan.github.io/corrmeta/reference/polycorr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Polychoric Correlations — polycorr","text":"Woo Jung","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/polycorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Polychoric Correlations — polycorr","text":"","code":"data(snp_example)   head(snp_example) #>         markname    trt1   trt2   trt3 #> 1 c01b000015585s 0.35580 0.7356 0.6920 #> 2 c01b000015644s 0.58850 0.4539 0.7164 #> 3 c01b000015647s 0.18840 0.3029 0.2111 #> 4 c01b000015717s 0.99820 0.2474 0.2029 #> 5 c01b000015721s 0.74750 0.2206 0.1954 #> 6 c01b000016805s 0.08051 0.1532 0.7910   varlist <- c(\"trt1\",\"trt2\",\"trt3\")   polycorr(snp_example, varlist) #>    row  col      PLCORR E_PLCORR #> 1 trt1 trt1  1.00000000        0 #> 2 trt1 trt2 -0.09051849       NA #> 3 trt1 trt3 -0.45007128       NA #> 4 trt2 trt1 -0.09051553       NA #> 5 trt2 trt2  1.00000000        0 #> 6 trt2 trt3  0.36202025       NA #> 7 trt3 trt1 -0.44174623       NA #> 8 trt3 trt2  0.36159934       NA #> 9 trt3 trt3  1.00000000        0"},{"path":"https://cmatkhan.github.io/corrmeta/reference/pvalues_to_zscores.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert P-values to Z-scores — pvalues_to_zscores","title":"Convert P-values to Z-scores — pvalues_to_zscores","text":"function takes data frame p-values converts Z-scores using quantile function standard normal distribution.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/pvalues_to_zscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert P-values to Z-scores — pvalues_to_zscores","text":"","code":"pvalues_to_zscores(df_pvalues)"},{"path":"https://cmatkhan.github.io/corrmeta/reference/pvalues_to_zscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert P-values to Z-scores — pvalues_to_zscores","text":"df_pvalues data frame containing p-values","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/pvalues_to_zscores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert P-values to Z-scores — pvalues_to_zscores","text":"data frame containing Z-scores","code":""},{"path":[]},{"path":"https://cmatkhan.github.io/corrmeta/reference/pvalues_to_zscores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert P-values to Z-scores — pvalues_to_zscores","text":"Woo Jung","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/pvalues_to_zscores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert P-values to Z-scores — pvalues_to_zscores","text":"","code":"data(snp_example)   head(snp_example) #>         markname    trt1   trt2   trt3 #> 1 c01b000015585s 0.35580 0.7356 0.6920 #> 2 c01b000015644s 0.58850 0.4539 0.7164 #> 3 c01b000015647s 0.18840 0.3029 0.2111 #> 4 c01b000015717s 0.99820 0.2474 0.2029 #> 5 c01b000015721s 0.74750 0.2206 0.1954 #> 6 c01b000016805s 0.08051 0.1532 0.7910   pvalues_to_zscores(snp_example) #>          markname       trt1        trt2       trt3 #> 1  c01b000015585s  0.3697081 -0.62983889 -0.5015274 #> 2  c01b000015644s -0.2236881  0.11581394 -0.5721801 #> 3  c01b000015647s  0.8838078  0.51607790  0.8026103 #> 4  c01b000015717s -2.9112377  0.68269435  0.8313074 #> 5  c01b000015721s -0.6666433  0.77016841  0.8581675 #> 6  c01b000016805s  1.4016493  1.02280511 -0.8098959 #> 7  c01b000016809s  1.4711890  0.55455365 -1.0709320 #> 8  c01b000016856s -0.6526220 -0.05115752  0.4696571 #> 9  c01b000016946s -0.7674736 -0.45598606 -0.8720154 #> 10 c01b000016963s -0.9330387 -0.82741832  0.4961338 #> 11 c01b000016968s  1.1169867 -0.21880751  0.6691497 #> 12 c01b000016977s -0.9184181 -0.75908786  0.7885074 #> 13 c01b000016993s  0.9043686 -0.30784537  1.5013696 #> 14 c01b000017041s -0.7329318 -1.14357484 -0.1251561 #> 15 c01b000017101s  0.6820616  0.47077699  1.2764401 #> 16 c01b000017147s  1.8075280 -1.56492712 -2.4624277 #> 17 c01b000017181s -0.9977512 -0.60196115 -0.7205279 #> 18 c01b000017375s -1.8807936  0.76747357  1.8407377 #> 19 c01b000017379s -0.1542660 -0.07803527  1.5919319"},{"path":"https://cmatkhan.github.io/corrmeta/reference/snp_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example SNP summary dataset — snp_example","title":"Example SNP summary dataset — snp_example","text":"data set provides 3 simulated 19-sample SNP-trait association p-values","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/snp_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example SNP summary dataset — snp_example","text":"","code":"snp_example"},{"path":"https://cmatkhan.github.io/corrmeta/reference/snp_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example SNP summary dataset — snp_example","text":"dataframe containing 19 observations across 3 SNP scans","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/snp_example_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Example SNP summary dataset with missing values — snp_example_missing","title":"Example SNP summary dataset with missing values — snp_example_missing","text":"data set provides 3 simulated 19-sample SNP-trait association p-values   samples removed reflect missing values.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/snp_example_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example SNP summary dataset with missing values — snp_example_missing","text":"","code":"snp_example_missing"},{"path":"https://cmatkhan.github.io/corrmeta/reference/snp_example_missing.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example SNP summary dataset with missing values — snp_example_missing","text":"dataframe containing 19 observations across 3 SNP scans","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/tetracorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Tetrachoric Correlations — tetracorr","title":"Calculate Tetrachoric Correlations — tetracorr","text":"function calculates tetrachoric correlations pairs variables given data frame. returns list containing data frame tetrachoric correlation coefficients, sum tetrachoric correlations input variable p-value form.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/tetracorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Tetrachoric Correlations — tetracorr","text":"","code":"tetracorr(data, varlist)"},{"path":"https://cmatkhan.github.io/corrmeta/reference/tetracorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Tetrachoric Correlations — tetracorr","text":"data data frame \"markname\" study names column names. varlist character vector study names include meta-analysis.","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/tetracorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Tetrachoric Correlations — tetracorr","text":"list containing data frame tetrachoric correlation coefficients, sum tetrachoric correlations input variable p-value form.","code":""},{"path":[]},{"path":"https://cmatkhan.github.io/corrmeta/reference/tetracorr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Tetrachoric Correlations — tetracorr","text":"Woo Jung","code":""},{"path":"https://cmatkhan.github.io/corrmeta/reference/tetracorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Tetrachoric Correlations — tetracorr","text":"","code":"data(snp_example)   head(snp_example) #>         markname    trt1   trt2   trt3 #> 1 c01b000015585s 0.35580 0.7356 0.6920 #> 2 c01b000015644s 0.58850 0.4539 0.7164 #> 3 c01b000015647s 0.18840 0.3029 0.2111 #> 4 c01b000015717s 0.99820 0.2474 0.2029 #> 5 c01b000015721s 0.74750 0.2206 0.1954 #> 6 c01b000016805s 0.08051 0.1532 0.7910   varlist <- c(\"trt1\",\"trt2\",\"trt3\")   tetracorr(snp_example, varlist) #> $sigma #> # A tibble: 3 × 4 #>   row     trt1  trt2   trt3 #>   <chr>  <dbl> <dbl>  <dbl> #> 1 trt1   1     0.215 -0.215 #> 2 trt2   0.215 1      0.127 #> 3 trt3  -0.215 0.127  1     #>  #> $sum_sigma #> [1] 3.253552 #>"}]
